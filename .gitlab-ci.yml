stages: [test, integration, build, bump]

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  IMAGE_NAME: "$CI_REGISTRY_IMAGE/api"
  IMAGE_TAG: "sha-$CI_COMMIT_SHORT_SHA"

cache:
  paths:
    - .cache/pip

test:
  stage: test
  image: python:3.11-slim
  before_script:
    - python -V
    - pip install --upgrade pip
    - pip install -r api/requirements.txt || true
    - pip install pytest pydantic requests
  script:
    - pytest
  artifacts:
    when: always
    reports:
      junit: junit.xml
    paths:
      - junit.xml

integration:
  stage: integration
  image: python:3.11-slim
  services:
    - name: qdrant/qdrant:v1.11.0
      alias: qdrant
    - name: ollama/ollama:0.3.14
      alias: ollama
      command: ["serve"] 
  variables:
    QDRANT_URL: "http://qdrant:6333"
    OLLAMA_URL: "http://ollama:11434"
    OLLAMA_NO_GPU: "1"
    PORT: "8080"
  before_script:
    - python -V
    - pip install --upgrade pip
    - pip install -r api/requirements.txt || true
    - pip install pytest httpx uvicorn
    - cd api
  script:
    - |
      # start API (bind to 0.0.0.0:8080) in background
      uvicorn app.main:app --host 0.0.0.0 --port 8080 &
      APP_PID=$!
      # wait for readiness (live first, then ready when deps are up)
      for i in $(seq 1 60); do
        if curl -fsS http://localhost:8080/health/live >/dev/null; then break; fi
        sleep 1
      done
      # optional: wait until ready (qdrant+ollama reachable), don’t fail early
      for i in $(seq 1 60); do
        if curl -fsS http://localhost:8080/healthz >/dev/null; then break; fi
        sleep 2
      done
      # run your integration tests (they’ll hit localhost:8080 or services directly)
      cd ..
      pytest tests/integration -q
      kill $APP_PID || true
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" || $CI_PIPELINE_SOURCE == "merge_request_event"'
  
# ---------- build & push (Kaniko; NO Docker needed) ----------
build_image:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  variables:
    DOCKER_CONFIG: /kaniko/.docker
  before_script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"auth\":\"$(printf "%s:%s" "gitlab-ci-token" "$CI_JOB_TOKEN" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
  script:
    - /kaniko/executor
      --context ./api
      --dockerfile ./api/Dockerfile
      --destination "$IMAGE_NAME:$IMAGE_TAG"
      --destination "$IMAGE_NAME:latest"
      --cache=true
      --verbosity=info
  rules:
    - if: $CI_COMMIT_BRANCH

