stages: [test, integration, build, bump]

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  IMAGE_NAME: "$CI_REGISTRY_IMAGE/api"
  IMAGE_TAG: "sha-$CI_COMMIT_SHORT_SHA"

cache:
  paths:
    - .cache/pip

test:
  stage: test
  image: python:3.11-slim
  before_script:
    - python -V
    - pip install --upgrade pip
    - pip install -r api/requirements.txt || true
    - pip install pytest pydantic requests
  script:
    - pytest
  artifacts:
    when: always
    reports:
      junit: junit.xml
    paths:
      - junit.xml

integration:
  stage: integration
  image: python:3.11-slim
  services:
    - name: qdrant/qdrant:v1.11.0
      alias: qdrant
    - name: ollama/ollama:0.3.14
      alias: ollama
      command: ["serve"]
  variables:
    QDRANT_URL: "http://qdrant:6333"
    OLLAMA_URL: "http://ollama:11434"
    OLLAMA_NO_GPU: "1"
    PORT: "8080"
  before_script:
    - apt-get update && apt-get install -y --no-install-recommends curl
    - pip install --upgrade pip
    - pip install -r api/requirements.txt || true
    - pip install pytest httpx uvicorn
  script:
    - |
      set -euo pipefail
      # run from the correct folder so "app.main" imports
      cd api

      # start API (bind to 0.0.0.0:8080) in background
      python -m uvicorn app.main:app --host 0.0.0.0 --port 8080 &
      APP_PID=$!

      # wait for liveness (server up)
      for i in $(seq 1 60); do
        if curl -fsS http://localhost:8080/health/live >/dev/null 2>&1; then
          echo "Liveness OK"
          break
        fi
        if ! kill -0 $APP_PID 2>/dev/null; then
          echo "API process exited early"; exit 1
        fi
        sleep 1
      done

      # OPTIONAL: try readiness, but don't fail if deps are slow
      for i in $(seq 1 120); do
        if curl -fsS http://localhost:8080/healthz >/dev/null 2>&1; then
          echo "Readiness OK"
          break
        fi
        sleep 2
      done || true

      # run your integration tests (from repo root)
      cd ..
      pytest tests/integration -q

      kill $APP_PID || true
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" || $CI_PIPELINE_SOURCE == "merge_request_event"'
# ---------- build & push (Kaniko; NO Docker needed) ----------
build_image:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  variables:
    DOCKER_CONFIG: /kaniko/.docker
  before_script:
    - mkdir -p /kaniko/.docker
    - |
      cat > /kaniko/.docker/config.json <<EOF
      {
        "auths": {
          "${CI_REGISTRY}": {
            "auth": "$(printf "%s:%s" "gitlab-ci-token" "$CI_JOB_TOKEN" | base64 | tr -d '\n')"
          }
        }
      }
      EOF
  script:
    - |
      set -eu
      echo "Pushing: ${IMAGE_NAME}:${IMAGE_TAG} and ${IMAGE_NAME}:${BRANCH_TAG}"
      DESTS="--destination ${IMAGE_NAME}:${IMAGE_TAG} --destination ${IMAGE_NAME}:${BRANCH_TAG}"
      if [ "${CI_COMMIT_BRANCH:-}" = "main" ]; then
        DESTS="$DESTS --destination ${IMAGE_NAME}:latest"
        echo "Also pushing :latest (main)"
      fi
      /kaniko/executor \
        --context "$CI_PROJECT_DIR/api" \
        --dockerfile "$CI_PROJECT_DIR/api/Dockerfile" \
        $DESTS \
        --cache=true \
        --verbosity=debug
  rules:
    - if: $CI_COMMIT_BRANCH

